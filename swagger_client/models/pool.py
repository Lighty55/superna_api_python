# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Pool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failover_readiness': 'DRFailoverStatus',
        'name': 'str',
        'readiness_detail': 'list[StatusDetail]',
        'zone': 'str'
    }

    attribute_map = {
        'failover_readiness': 'failoverReadiness',
        'name': 'name',
        'readiness_detail': 'readinessDetail',
        'zone': 'zone'
    }

    def __init__(self, failover_readiness=None, name=None, readiness_detail=None, zone=None, _configuration=None):  # noqa: E501
        """Pool - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._failover_readiness = None
        self._name = None
        self._readiness_detail = None
        self._zone = None
        self.discriminator = None

        if failover_readiness is not None:
            self.failover_readiness = failover_readiness
        if name is not None:
            self.name = name
        if readiness_detail is not None:
            self.readiness_detail = readiness_detail
        if zone is not None:
            self.zone = zone

    @property
    def failover_readiness(self):
        """Gets the failover_readiness of this Pool.  # noqa: E501


        :return: The failover_readiness of this Pool.  # noqa: E501
        :rtype: DRFailoverStatus
        """
        return self._failover_readiness

    @failover_readiness.setter
    def failover_readiness(self, failover_readiness):
        """Sets the failover_readiness of this Pool.


        :param failover_readiness: The failover_readiness of this Pool.  # noqa: E501
        :type: DRFailoverStatus
        """

        self._failover_readiness = failover_readiness

    @property
    def name(self):
        """Gets the name of this Pool.  # noqa: E501

        Pool Name  # noqa: E501

        :return: The name of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pool.

        Pool Name  # noqa: E501

        :param name: The name of this Pool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def readiness_detail(self):
        """Gets the readiness_detail of this Pool.  # noqa: E501


        :return: The readiness_detail of this Pool.  # noqa: E501
        :rtype: list[StatusDetail]
        """
        return self._readiness_detail

    @readiness_detail.setter
    def readiness_detail(self, readiness_detail):
        """Sets the readiness_detail of this Pool.


        :param readiness_detail: The readiness_detail of this Pool.  # noqa: E501
        :type: list[StatusDetail]
        """

        self._readiness_detail = readiness_detail

    @property
    def zone(self):
        """Gets the zone of this Pool.  # noqa: E501

        Zone Name  # noqa: E501

        :return: The zone of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Pool.

        Zone Name  # noqa: E501

        :param zone: The zone of this Pool.  # noqa: E501
        :type: str
        """

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pool):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pool):
            return True

        return self.to_dict() != other.to_dict()
