# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UpdateECSAirGap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'airgap_state': 'str',
        'lastrun': 'int',
        'lastsuccess': 'int',
        'statusinfo': 'str'
    }

    attribute_map = {
        'airgap_state': 'airgapState',
        'lastrun': 'lastrun',
        'lastsuccess': 'lastsuccess',
        'statusinfo': 'statusinfo'
    }

    def __init__(self, airgap_state=None, lastrun=None, lastsuccess=None, statusinfo=None, _configuration=None):  # noqa: E501
        """UpdateECSAirGap - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._airgap_state = None
        self._lastrun = None
        self._lastsuccess = None
        self._statusinfo = None
        self.discriminator = None

        if airgap_state is not None:
            self.airgap_state = airgap_state
        if lastrun is not None:
            self.lastrun = lastrun
        if lastsuccess is not None:
            self.lastsuccess = lastsuccess
        if statusinfo is not None:
            self.statusinfo = statusinfo

    @property
    def airgap_state(self):
        """Gets the airgap_state of this UpdateECSAirGap.  # noqa: E501


        :return: The airgap_state of this UpdateECSAirGap.  # noqa: E501
        :rtype: str
        """
        return self._airgap_state

    @airgap_state.setter
    def airgap_state(self, airgap_state):
        """Sets the airgap_state of this UpdateECSAirGap.


        :param airgap_state: The airgap_state of this UpdateECSAirGap.  # noqa: E501
        :type: str
        """
        allowed_values = ["AirGapRouteClosed", "AirGapRouteOpen", "ActiveEventDisabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                airgap_state not in allowed_values):
            raise ValueError(
                "Invalid value for `airgap_state` ({0}), must be one of {1}"  # noqa: E501
                .format(airgap_state, allowed_values)
            )

        self._airgap_state = airgap_state

    @property
    def lastrun(self):
        """Gets the lastrun of this UpdateECSAirGap.  # noqa: E501

        Last run timestamp.  # noqa: E501

        :return: The lastrun of this UpdateECSAirGap.  # noqa: E501
        :rtype: int
        """
        return self._lastrun

    @lastrun.setter
    def lastrun(self, lastrun):
        """Sets the lastrun of this UpdateECSAirGap.

        Last run timestamp.  # noqa: E501

        :param lastrun: The lastrun of this UpdateECSAirGap.  # noqa: E501
        :type: int
        """

        self._lastrun = lastrun

    @property
    def lastsuccess(self):
        """Gets the lastsuccess of this UpdateECSAirGap.  # noqa: E501

        Last success timestamp.  # noqa: E501

        :return: The lastsuccess of this UpdateECSAirGap.  # noqa: E501
        :rtype: int
        """
        return self._lastsuccess

    @lastsuccess.setter
    def lastsuccess(self, lastsuccess):
        """Sets the lastsuccess of this UpdateECSAirGap.

        Last success timestamp.  # noqa: E501

        :param lastsuccess: The lastsuccess of this UpdateECSAirGap.  # noqa: E501
        :type: int
        """

        self._lastsuccess = lastsuccess

    @property
    def statusinfo(self):
        """Gets the statusinfo of this UpdateECSAirGap.  # noqa: E501

        Extra param for status update or error message.  # noqa: E501

        :return: The statusinfo of this UpdateECSAirGap.  # noqa: E501
        :rtype: str
        """
        return self._statusinfo

    @statusinfo.setter
    def statusinfo(self, statusinfo):
        """Sets the statusinfo of this UpdateECSAirGap.

        Extra param for status update or error message.  # noqa: E501

        :param statusinfo: The statusinfo of this UpdateECSAirGap.  # noqa: E501
        :type: str
        """

        self._statusinfo = statusinfo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateECSAirGap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateECSAirGap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateECSAirGap):
            return True

        return self.to_dict() != other.to_dict()
