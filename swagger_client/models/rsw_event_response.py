# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RSWEventResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_source': 'str',
        'object_buckets': 'list[str]',
        'severity': 'str',
        'user': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'event_source': 'eventSource',
        'object_buckets': 'objectBuckets',
        'severity': 'severity',
        'user': 'user',
        'user_name': 'userName'
    }

    def __init__(self, event_source=None, object_buckets=None, severity=None, user=None, user_name=None, _configuration=None):  # noqa: E501
        """RSWEventResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._event_source = None
        self._object_buckets = None
        self._severity = None
        self._user = None
        self._user_name = None
        self.discriminator = None

        if event_source is not None:
            self.event_source = event_source
        if object_buckets is not None:
            self.object_buckets = object_buckets
        if severity is not None:
            self.severity = severity
        if user is not None:
            self.user = user
        if user_name is not None:
            self.user_name = user_name

    @property
    def event_source(self):
        """Gets the event_source of this RSWEventResponse.  # noqa: E501

        Ransomware event source.  # noqa: E501

        :return: The event_source of this RSWEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this RSWEventResponse.

        Ransomware event source.  # noqa: E501

        :param event_source: The event_source of this RSWEventResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ISILON_CLUSTER", "ECS", "AWS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                event_source not in allowed_values):
            raise ValueError(
                "Invalid value for `event_source` ({0}), must be one of {1}"  # noqa: E501
                .format(event_source, allowed_values)
            )

        self._event_source = event_source

    @property
    def object_buckets(self):
        """Gets the object_buckets of this RSWEventResponse.  # noqa: E501

        S3 buckets involved in this ransomware event. This will be an empty array if this is not an ECS or AWS event.  # noqa: E501

        :return: The object_buckets of this RSWEventResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._object_buckets

    @object_buckets.setter
    def object_buckets(self, object_buckets):
        """Sets the object_buckets of this RSWEventResponse.

        S3 buckets involved in this ransomware event. This will be an empty array if this is not an ECS or AWS event.  # noqa: E501

        :param object_buckets: The object_buckets of this RSWEventResponse.  # noqa: E501
        :type: list[str]
        """

        self._object_buckets = object_buckets

    @property
    def severity(self):
        """Gets the severity of this RSWEventResponse.  # noqa: E501

        event severity (WARNING, MAJOR, CRITICAL)  # noqa: E501

        :return: The severity of this RSWEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this RSWEventResponse.

        event severity (WARNING, MAJOR, CRITICAL)  # noqa: E501

        :param severity: The severity of this RSWEventResponse.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def user(self):
        """Gets the user of this RSWEventResponse.  # noqa: E501

        user sid  # noqa: E501

        :return: The user of this RSWEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RSWEventResponse.

        user sid  # noqa: E501

        :param user: The user of this RSWEventResponse.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def user_name(self):
        """Gets the user_name of this RSWEventResponse.  # noqa: E501

        user name  # noqa: E501

        :return: The user_name of this RSWEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this RSWEventResponse.

        user name  # noqa: E501

        :param user_name: The user_name of this RSWEventResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RSWEventResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RSWEventResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RSWEventResponse):
            return True

        return self.to_dict() != other.to_dict()
