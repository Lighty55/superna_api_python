# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WritableSnapshotModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'str',
        'ne': 'str',
        'source_path': 'str',
        'source_snap': 'str',
        'target_path': 'str'
    }

    attribute_map = {
        'created': 'created',
        'ne': 'ne',
        'source_path': 'sourcePath',
        'source_snap': 'sourceSnap',
        'target_path': 'targetPath'
    }

    def __init__(self, created=None, ne=None, source_path=None, source_snap=None, target_path=None, _configuration=None):  # noqa: E501
        """WritableSnapshotModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._ne = None
        self._source_path = None
        self._source_snap = None
        self._target_path = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if ne is not None:
            self.ne = ne
        if source_path is not None:
            self.source_path = source_path
        if source_snap is not None:
            self.source_snap = source_snap
        if target_path is not None:
            self.target_path = target_path

    @property
    def created(self):
        """Gets the created of this WritableSnapshotModel.  # noqa: E501

        Timestamp when this snap was created  # noqa: E501

        :return: The created of this WritableSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableSnapshotModel.

        Timestamp when this snap was created  # noqa: E501

        :param created: The created of this WritableSnapshotModel.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def ne(self):
        """Gets the ne of this WritableSnapshotModel.  # noqa: E501

        Isilon Cluster for this job  # noqa: E501

        :return: The ne of this WritableSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._ne

    @ne.setter
    def ne(self, ne):
        """Sets the ne of this WritableSnapshotModel.

        Isilon Cluster for this job  # noqa: E501

        :param ne: The ne of this WritableSnapshotModel.  # noqa: E501
        :type: str
        """

        self._ne = ne

    @property
    def source_path(self):
        """Gets the source_path of this WritableSnapshotModel.  # noqa: E501

        Source path for this job  # noqa: E501

        :return: The source_path of this WritableSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this WritableSnapshotModel.

        Source path for this job  # noqa: E501

        :param source_path: The source_path of this WritableSnapshotModel.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def source_snap(self):
        """Gets the source_snap of this WritableSnapshotModel.  # noqa: E501

        Source snap for this job  # noqa: E501

        :return: The source_snap of this WritableSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._source_snap

    @source_snap.setter
    def source_snap(self, source_snap):
        """Sets the source_snap of this WritableSnapshotModel.

        Source snap for this job  # noqa: E501

        :param source_snap: The source_snap of this WritableSnapshotModel.  # noqa: E501
        :type: str
        """

        self._source_snap = source_snap

    @property
    def target_path(self):
        """Gets the target_path of this WritableSnapshotModel.  # noqa: E501

        Target path for this job  # noqa: E501

        :return: The target_path of this WritableSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._target_path

    @target_path.setter
    def target_path(self, target_path):
        """Sets the target_path of this WritableSnapshotModel.

        Target path for this job  # noqa: E501

        :param target_path: The target_path of this WritableSnapshotModel.  # noqa: E501
        :type: str
        """

        self._target_path = target_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WritableSnapshotModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WritableSnapshotModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WritableSnapshotModel):
            return True

        return self.to_dict() != other.to_dict()
