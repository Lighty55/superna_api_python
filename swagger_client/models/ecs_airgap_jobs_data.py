# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ECSAirgapJobsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'createtime': 'int',
        'cron': 'str',
        'destination_bucket': 'str',
        'destination_namespace': 'str',
        'destinationpath': 'str',
        'disable_on_active_events': 'bool',
        'enabled': 'bool',
        'name': 'str',
        'source_bucket': 'str',
        'source_namespace': 'str',
        'sourcepath': 'str',
        'vdc': 'str',
        'vdc_id': 'str'
    }

    attribute_map = {
        'createtime': 'createtime',
        'cron': 'cron',
        'destination_bucket': 'destinationBucket',
        'destination_namespace': 'destinationNamespace',
        'destinationpath': 'destinationpath',
        'disable_on_active_events': 'disableOnActiveEvents',
        'enabled': 'enabled',
        'name': 'name',
        'source_bucket': 'sourceBucket',
        'source_namespace': 'sourceNamespace',
        'sourcepath': 'sourcepath',
        'vdc': 'vdc',
        'vdc_id': 'vdcID'
    }

    def __init__(self, createtime=None, cron=None, destination_bucket=None, destination_namespace=None, destinationpath=None, disable_on_active_events=None, enabled=None, name=None, source_bucket=None, source_namespace=None, sourcepath=None, vdc=None, vdc_id=None, _configuration=None):  # noqa: E501
        """ECSAirgapJobsData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._createtime = None
        self._cron = None
        self._destination_bucket = None
        self._destination_namespace = None
        self._destinationpath = None
        self._disable_on_active_events = None
        self._enabled = None
        self._name = None
        self._source_bucket = None
        self._source_namespace = None
        self._sourcepath = None
        self._vdc = None
        self._vdc_id = None
        self.discriminator = None

        if createtime is not None:
            self.createtime = createtime
        if cron is not None:
            self.cron = cron
        if destination_bucket is not None:
            self.destination_bucket = destination_bucket
        if destination_namespace is not None:
            self.destination_namespace = destination_namespace
        if destinationpath is not None:
            self.destinationpath = destinationpath
        if disable_on_active_events is not None:
            self.disable_on_active_events = disable_on_active_events
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        if source_bucket is not None:
            self.source_bucket = source_bucket
        if source_namespace is not None:
            self.source_namespace = source_namespace
        if sourcepath is not None:
            self.sourcepath = sourcepath
        if vdc is not None:
            self.vdc = vdc
        if vdc_id is not None:
            self.vdc_id = vdc_id

    @property
    def createtime(self):
        """Gets the createtime of this ECSAirgapJobsData.  # noqa: E501

        Job creation timestamp.  # noqa: E501

        :return: The createtime of this ECSAirgapJobsData.  # noqa: E501
        :rtype: int
        """
        return self._createtime

    @createtime.setter
    def createtime(self, createtime):
        """Sets the createtime of this ECSAirgapJobsData.

        Job creation timestamp.  # noqa: E501

        :param createtime: The createtime of this ECSAirgapJobsData.  # noqa: E501
        :type: int
        """

        self._createtime = createtime

    @property
    def cron(self):
        """Gets the cron of this ECSAirgapJobsData.  # noqa: E501

        Cron schedule  # noqa: E501

        :return: The cron of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this ECSAirgapJobsData.

        Cron schedule  # noqa: E501

        :param cron: The cron of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def destination_bucket(self):
        """Gets the destination_bucket of this ECSAirgapJobsData.  # noqa: E501

        Destination bucket.  # noqa: E501

        :return: The destination_bucket of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._destination_bucket

    @destination_bucket.setter
    def destination_bucket(self, destination_bucket):
        """Sets the destination_bucket of this ECSAirgapJobsData.

        Destination bucket.  # noqa: E501

        :param destination_bucket: The destination_bucket of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._destination_bucket = destination_bucket

    @property
    def destination_namespace(self):
        """Gets the destination_namespace of this ECSAirgapJobsData.  # noqa: E501

        Destination namespace.  # noqa: E501

        :return: The destination_namespace of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._destination_namespace

    @destination_namespace.setter
    def destination_namespace(self, destination_namespace):
        """Sets the destination_namespace of this ECSAirgapJobsData.

        Destination namespace.  # noqa: E501

        :param destination_namespace: The destination_namespace of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._destination_namespace = destination_namespace

    @property
    def destinationpath(self):
        """Gets the destinationpath of this ECSAirgapJobsData.  # noqa: E501

        Destination path in destination bucket.  # noqa: E501

        :return: The destinationpath of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._destinationpath

    @destinationpath.setter
    def destinationpath(self, destinationpath):
        """Sets the destinationpath of this ECSAirgapJobsData.

        Destination path in destination bucket.  # noqa: E501

        :param destinationpath: The destinationpath of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._destinationpath = destinationpath

    @property
    def disable_on_active_events(self):
        """Gets the disable_on_active_events of this ECSAirgapJobsData.  # noqa: E501

        Should job be disabled in case of active RSW events.  # noqa: E501

        :return: The disable_on_active_events of this ECSAirgapJobsData.  # noqa: E501
        :rtype: bool
        """
        return self._disable_on_active_events

    @disable_on_active_events.setter
    def disable_on_active_events(self, disable_on_active_events):
        """Sets the disable_on_active_events of this ECSAirgapJobsData.

        Should job be disabled in case of active RSW events.  # noqa: E501

        :param disable_on_active_events: The disable_on_active_events of this ECSAirgapJobsData.  # noqa: E501
        :type: bool
        """

        self._disable_on_active_events = disable_on_active_events

    @property
    def enabled(self):
        """Gets the enabled of this ECSAirgapJobsData.  # noqa: E501

        Is ECS AirGap job enabled.  # noqa: E501

        :return: The enabled of this ECSAirgapJobsData.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ECSAirgapJobsData.

        Is ECS AirGap job enabled.  # noqa: E501

        :param enabled: The enabled of this ECSAirgapJobsData.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this ECSAirgapJobsData.  # noqa: E501

        Job name  # noqa: E501

        :return: The name of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ECSAirgapJobsData.

        Job name  # noqa: E501

        :param name: The name of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_bucket(self):
        """Gets the source_bucket of this ECSAirgapJobsData.  # noqa: E501

        Source bucket.  # noqa: E501

        :return: The source_bucket of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._source_bucket

    @source_bucket.setter
    def source_bucket(self, source_bucket):
        """Sets the source_bucket of this ECSAirgapJobsData.

        Source bucket.  # noqa: E501

        :param source_bucket: The source_bucket of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._source_bucket = source_bucket

    @property
    def source_namespace(self):
        """Gets the source_namespace of this ECSAirgapJobsData.  # noqa: E501

        Source namespace.  # noqa: E501

        :return: The source_namespace of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._source_namespace

    @source_namespace.setter
    def source_namespace(self, source_namespace):
        """Sets the source_namespace of this ECSAirgapJobsData.

        Source namespace.  # noqa: E501

        :param source_namespace: The source_namespace of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._source_namespace = source_namespace

    @property
    def sourcepath(self):
        """Gets the sourcepath of this ECSAirgapJobsData.  # noqa: E501

        Source path in source bucket.  # noqa: E501

        :return: The sourcepath of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._sourcepath

    @sourcepath.setter
    def sourcepath(self, sourcepath):
        """Sets the sourcepath of this ECSAirgapJobsData.

        Source path in source bucket.  # noqa: E501

        :param sourcepath: The sourcepath of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._sourcepath = sourcepath

    @property
    def vdc(self):
        """Gets the vdc of this ECSAirgapJobsData.  # noqa: E501

        Source VDC Name.  # noqa: E501

        :return: The vdc of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._vdc

    @vdc.setter
    def vdc(self, vdc):
        """Sets the vdc of this ECSAirgapJobsData.

        Source VDC Name.  # noqa: E501

        :param vdc: The vdc of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._vdc = vdc

    @property
    def vdc_id(self):
        """Gets the vdc_id of this ECSAirgapJobsData.  # noqa: E501

        Source VDC ID.  # noqa: E501

        :return: The vdc_id of this ECSAirgapJobsData.  # noqa: E501
        :rtype: str
        """
        return self._vdc_id

    @vdc_id.setter
    def vdc_id(self, vdc_id):
        """Sets the vdc_id of this ECSAirgapJobsData.

        Source VDC ID.  # noqa: E501

        :param vdc_id: The vdc_id of this ECSAirgapJobsData.  # noqa: E501
        :type: str
        """

        self._vdc_id = vdc_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECSAirgapJobsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECSAirgapJobsData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ECSAirgapJobsData):
            return True

        return self.to_dict() != other.to_dict()
