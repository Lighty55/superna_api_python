# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failover_target': 'JobFailoverTarget',
        'finished': 'int',
        'id': 'str',
        'job_status_details': 'JobStatusDetail',
        'job_type': 'str',
        'name': 'str',
        'source_node': 'Node',
        'started': 'int',
        'success': 'bool',
        'target_node': 'Node'
    }

    attribute_map = {
        'failover_target': 'failoverTarget',
        'finished': 'finished',
        'id': 'id',
        'job_status_details': 'jobStatusDetails',
        'job_type': 'jobType',
        'name': 'name',
        'source_node': 'sourceNode',
        'started': 'started',
        'success': 'success',
        'target_node': 'targetNode'
    }

    def __init__(self, failover_target=None, finished=None, id=None, job_status_details=None, job_type=None, name=None, source_node=None, started=None, success=None, target_node=None, _configuration=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._failover_target = None
        self._finished = None
        self._id = None
        self._job_status_details = None
        self._job_type = None
        self._name = None
        self._source_node = None
        self._started = None
        self._success = None
        self._target_node = None
        self.discriminator = None

        if failover_target is not None:
            self.failover_target = failover_target
        if finished is not None:
            self.finished = finished
        if id is not None:
            self.id = id
        if job_status_details is not None:
            self.job_status_details = job_status_details
        if job_type is not None:
            self.job_type = job_type
        if name is not None:
            self.name = name
        if source_node is not None:
            self.source_node = source_node
        if started is not None:
            self.started = started
        if success is not None:
            self.success = success
        if target_node is not None:
            self.target_node = target_node

    @property
    def failover_target(self):
        """Gets the failover_target of this Job.  # noqa: E501


        :return: The failover_target of this Job.  # noqa: E501
        :rtype: JobFailoverTarget
        """
        return self._failover_target

    @failover_target.setter
    def failover_target(self, failover_target):
        """Sets the failover_target of this Job.


        :param failover_target: The failover_target of this Job.  # noqa: E501
        :type: JobFailoverTarget
        """

        self._failover_target = failover_target

    @property
    def finished(self):
        """Gets the finished of this Job.  # noqa: E501

        The end time of the job  # noqa: E501

        :return: The finished of this Job.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Job.

        The end time of the job  # noqa: E501

        :param finished: The finished of this Job.  # noqa: E501
        :type: int
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_status_details(self):
        """Gets the job_status_details of this Job.  # noqa: E501


        :return: The job_status_details of this Job.  # noqa: E501
        :rtype: JobStatusDetail
        """
        return self._job_status_details

    @job_status_details.setter
    def job_status_details(self, job_status_details):
        """Sets the job_status_details of this Job.


        :param job_status_details: The job_status_details of this Job.  # noqa: E501
        :type: JobStatusDetail
        """

        self._job_status_details = job_status_details

    @property
    def job_type(self):
        """Gets the job_type of this Job.  # noqa: E501

        The type of the job  # noqa: E501

        :return: The job_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this Job.

        The type of the job  # noqa: E501

        :param job_type: The job_type of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["zone_failover", "policy_failover"]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_type not in allowed_values):
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501

        Human readable name for this job  # noqa: E501

        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        Human readable name for this job  # noqa: E501

        :param name: The name of this Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_node(self):
        """Gets the source_node of this Job.  # noqa: E501


        :return: The source_node of this Job.  # noqa: E501
        :rtype: Node
        """
        return self._source_node

    @source_node.setter
    def source_node(self, source_node):
        """Sets the source_node of this Job.


        :param source_node: The source_node of this Job.  # noqa: E501
        :type: Node
        """

        self._source_node = source_node

    @property
    def started(self):
        """Gets the started of this Job.  # noqa: E501

        The start time of the job  # noqa: E501

        :return: The started of this Job.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Job.

        The start time of the job  # noqa: E501

        :param started: The started of this Job.  # noqa: E501
        :type: int
        """

        self._started = started

    @property
    def success(self):
        """Gets the success of this Job.  # noqa: E501

        True if there were no errors  # noqa: E501

        :return: The success of this Job.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Job.

        True if there were no errors  # noqa: E501

        :param success: The success of this Job.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def target_node(self):
        """Gets the target_node of this Job.  # noqa: E501


        :return: The target_node of this Job.  # noqa: E501
        :rtype: Node
        """
        return self._target_node

    @target_node.setter
    def target_node(self, target_node):
        """Sets the target_node of this Job.


        :param target_node: The target_node of this Job.  # noqa: E501
        :type: Node
        """

        self._target_node = target_node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
