# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class JobStatusDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children_details': 'list[JobStatusDetail]',
        'finished': 'int',
        'id': 'str',
        'info': 'str',
        'name': 'str',
        'started': 'int',
        'state': 'str',
        'status': 'str'
    }

    attribute_map = {
        'children_details': 'childrenDetails',
        'finished': 'finished',
        'id': 'id',
        'info': 'info',
        'name': 'name',
        'started': 'started',
        'state': 'state',
        'status': 'status'
    }

    def __init__(self, children_details=None, finished=None, id=None, info=None, name=None, started=None, state=None, status=None, _configuration=None):  # noqa: E501
        """JobStatusDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._children_details = None
        self._finished = None
        self._id = None
        self._info = None
        self._name = None
        self._started = None
        self._state = None
        self._status = None
        self.discriminator = None

        if children_details is not None:
            self.children_details = children_details
        if finished is not None:
            self.finished = finished
        if id is not None:
            self.id = id
        if info is not None:
            self.info = info
        if name is not None:
            self.name = name
        if started is not None:
            self.started = started
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status

    @property
    def children_details(self):
        """Gets the children_details of this JobStatusDetail.  # noqa: E501


        :return: The children_details of this JobStatusDetail.  # noqa: E501
        :rtype: list[JobStatusDetail]
        """
        return self._children_details

    @children_details.setter
    def children_details(self, children_details):
        """Sets the children_details of this JobStatusDetail.


        :param children_details: The children_details of this JobStatusDetail.  # noqa: E501
        :type: list[JobStatusDetail]
        """

        self._children_details = children_details

    @property
    def finished(self):
        """Gets the finished of this JobStatusDetail.  # noqa: E501

        Timestamp when job finished  # noqa: E501

        :return: The finished of this JobStatusDetail.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this JobStatusDetail.

        Timestamp when job finished  # noqa: E501

        :param finished: The finished of this JobStatusDetail.  # noqa: E501
        :type: int
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this JobStatusDetail.  # noqa: E501

        Job id  # noqa: E501

        :return: The id of this JobStatusDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobStatusDetail.

        Job id  # noqa: E501

        :param id: The id of this JobStatusDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def info(self):
        """Gets the info of this JobStatusDetail.  # noqa: E501

        Extra info  # noqa: E501

        :return: The info of this JobStatusDetail.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this JobStatusDetail.

        Extra info  # noqa: E501

        :param info: The info of this JobStatusDetail.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def name(self):
        """Gets the name of this JobStatusDetail.  # noqa: E501

        Job Name  # noqa: E501

        :return: The name of this JobStatusDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobStatusDetail.

        Job Name  # noqa: E501

        :param name: The name of this JobStatusDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def started(self):
        """Gets the started of this JobStatusDetail.  # noqa: E501

        Timestamp when job started  # noqa: E501

        :return: The started of this JobStatusDetail.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this JobStatusDetail.

        Timestamp when job started  # noqa: E501

        :param started: The started of this JobStatusDetail.  # noqa: E501
        :type: int
        """

        self._started = started

    @property
    def state(self):
        """Gets the state of this JobStatusDetail.  # noqa: E501

        Job state  # noqa: E501

        :return: The state of this JobStatusDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobStatusDetail.

        Job state  # noqa: E501

        :param state: The state of this JobStatusDetail.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this JobStatusDetail.  # noqa: E501

        Job status  # noqa: E501

        :return: The status of this JobStatusDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobStatusDetail.

        Job status  # noqa: E501

        :param status: The status of this JobStatusDetail.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobStatusDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobStatusDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobStatusDetail):
            return True

        return self.to_dict() != other.to_dict()
