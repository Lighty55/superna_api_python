# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ECSSyncJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron': 'str',
        'disable_on_rsw': 'str',
        'id': 'str',
        'job_details': 'str',
        'name': 'str',
        'source_bucket': 'str',
        'source_host': 'str',
        'source_port': 'str',
        'state': 'str',
        'status': 'str',
        'target_bucket': 'str',
        'target_host': 'str',
        'target_port': 'str'
    }

    attribute_map = {
        'cron': 'cron',
        'disable_on_rsw': 'disableOnRSW',
        'id': 'id',
        'job_details': 'jobDetails',
        'name': 'name',
        'source_bucket': 'sourceBucket',
        'source_host': 'sourceHost',
        'source_port': 'sourcePort',
        'state': 'state',
        'status': 'status',
        'target_bucket': 'targetBucket',
        'target_host': 'targetHost',
        'target_port': 'targetPort'
    }

    def __init__(self, cron=None, disable_on_rsw=None, id=None, job_details=None, name=None, source_bucket=None, source_host=None, source_port=None, state=None, status=None, target_bucket=None, target_host=None, target_port=None, _configuration=None):  # noqa: E501
        """ECSSyncJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cron = None
        self._disable_on_rsw = None
        self._id = None
        self._job_details = None
        self._name = None
        self._source_bucket = None
        self._source_host = None
        self._source_port = None
        self._state = None
        self._status = None
        self._target_bucket = None
        self._target_host = None
        self._target_port = None
        self.discriminator = None

        if cron is not None:
            self.cron = cron
        if disable_on_rsw is not None:
            self.disable_on_rsw = disable_on_rsw
        if id is not None:
            self.id = id
        if job_details is not None:
            self.job_details = job_details
        if name is not None:
            self.name = name
        if source_bucket is not None:
            self.source_bucket = source_bucket
        if source_host is not None:
            self.source_host = source_host
        if source_port is not None:
            self.source_port = source_port
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if target_bucket is not None:
            self.target_bucket = target_bucket
        if target_host is not None:
            self.target_host = target_host
        if target_port is not None:
            self.target_port = target_port

    @property
    def cron(self):
        """Gets the cron of this ECSSyncJob.  # noqa: E501

        cron schedule for the ecs-sync job  # noqa: E501

        :return: The cron of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this ECSSyncJob.

        cron schedule for the ecs-sync job  # noqa: E501

        :param cron: The cron of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def disable_on_rsw(self):
        """Gets the disable_on_rsw of this ECSSyncJob.  # noqa: E501

        disable job run if there is an active RSW event  # noqa: E501

        :return: The disable_on_rsw of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._disable_on_rsw

    @disable_on_rsw.setter
    def disable_on_rsw(self, disable_on_rsw):
        """Sets the disable_on_rsw of this ECSSyncJob.

        disable job run if there is an active RSW event  # noqa: E501

        :param disable_on_rsw: The disable_on_rsw of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._disable_on_rsw = disable_on_rsw

    @property
    def id(self):
        """Gets the id of this ECSSyncJob.  # noqa: E501

        Id of the ecs sync copy job  # noqa: E501

        :return: The id of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ECSSyncJob.

        Id of the ecs sync copy job  # noqa: E501

        :param id: The id of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_details(self):
        """Gets the job_details of this ECSSyncJob.  # noqa: E501

        Any extra job information- including job progress- in a json file  # noqa: E501

        :return: The job_details of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._job_details

    @job_details.setter
    def job_details(self, job_details):
        """Sets the job_details of this ECSSyncJob.

        Any extra job information- including job progress- in a json file  # noqa: E501

        :param job_details: The job_details of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._job_details = job_details

    @property
    def name(self):
        """Gets the name of this ECSSyncJob.  # noqa: E501

        Name of the ecs sync copy job  # noqa: E501

        :return: The name of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ECSSyncJob.

        Name of the ecs sync copy job  # noqa: E501

        :param name: The name of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_bucket(self):
        """Gets the source_bucket of this ECSSyncJob.  # noqa: E501

        sourceBucket of the ecs sync copy job  # noqa: E501

        :return: The source_bucket of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._source_bucket

    @source_bucket.setter
    def source_bucket(self, source_bucket):
        """Sets the source_bucket of this ECSSyncJob.

        sourceBucket of the ecs sync copy job  # noqa: E501

        :param source_bucket: The source_bucket of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._source_bucket = source_bucket

    @property
    def source_host(self):
        """Gets the source_host of this ECSSyncJob.  # noqa: E501

        sourceHost of the ecs sync copy job  # noqa: E501

        :return: The source_host of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._source_host

    @source_host.setter
    def source_host(self, source_host):
        """Sets the source_host of this ECSSyncJob.

        sourceHost of the ecs sync copy job  # noqa: E501

        :param source_host: The source_host of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._source_host = source_host

    @property
    def source_port(self):
        """Gets the source_port of this ECSSyncJob.  # noqa: E501

        sourcePort of the ecs sync copy job  # noqa: E501

        :return: The source_port of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this ECSSyncJob.

        sourcePort of the ecs sync copy job  # noqa: E501

        :param source_port: The source_port of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._source_port = source_port

    @property
    def state(self):
        """Gets the state of this ECSSyncJob.  # noqa: E501

        eyeglass user state for the ecs-sync job(enabled/disabled)  # noqa: E501

        :return: The state of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ECSSyncJob.

        eyeglass user state for the ecs-sync job(enabled/disabled)  # noqa: E501

        :param state: The state of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this ECSSyncJob.  # noqa: E501

        Status of the ecs sync copy job  # noqa: E501

        :return: The status of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ECSSyncJob.

        Status of the ecs sync copy job  # noqa: E501

        :param status: The status of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def target_bucket(self):
        """Gets the target_bucket of this ECSSyncJob.  # noqa: E501

        targetBucket of the ecs sync copy job  # noqa: E501

        :return: The target_bucket of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._target_bucket

    @target_bucket.setter
    def target_bucket(self, target_bucket):
        """Sets the target_bucket of this ECSSyncJob.

        targetBucket of the ecs sync copy job  # noqa: E501

        :param target_bucket: The target_bucket of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._target_bucket = target_bucket

    @property
    def target_host(self):
        """Gets the target_host of this ECSSyncJob.  # noqa: E501

        targetHost of the ecs sync copy job  # noqa: E501

        :return: The target_host of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._target_host

    @target_host.setter
    def target_host(self, target_host):
        """Sets the target_host of this ECSSyncJob.

        targetHost of the ecs sync copy job  # noqa: E501

        :param target_host: The target_host of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._target_host = target_host

    @property
    def target_port(self):
        """Gets the target_port of this ECSSyncJob.  # noqa: E501

        targetPort of the ecs sync copy job  # noqa: E501

        :return: The target_port of this ECSSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._target_port

    @target_port.setter
    def target_port(self, target_port):
        """Sets the target_port of this ECSSyncJob.

        targetPort of the ecs sync copy job  # noqa: E501

        :param target_port: The target_port of this ECSSyncJob.  # noqa: E501
        :type: str
        """

        self._target_port = target_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECSSyncJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECSSyncJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ECSSyncJob):
            return True

        return self.to_dict() != other.to_dict()
