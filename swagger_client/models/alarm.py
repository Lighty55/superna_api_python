# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Alarm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'extra_data': 'str',
        'message': 'str',
        'severity': 'str',
        'source': 'str',
        'sync_group': 'str',
        'sync_key': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'code': 'code',
        'extra_data': 'extra_data',
        'message': 'message',
        'severity': 'severity',
        'source': 'source',
        'sync_group': 'sync_group',
        'sync_key': 'sync_key',
        'timestamp': 'timestamp'
    }

    def __init__(self, code=None, extra_data=None, message=None, severity=None, source=None, sync_group=None, sync_key=None, timestamp=None, _configuration=None):  # noqa: E501
        """Alarm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._extra_data = None
        self._message = None
        self._severity = None
        self._source = None
        self._sync_group = None
        self._sync_key = None
        self._timestamp = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if extra_data is not None:
            self.extra_data = extra_data
        if message is not None:
            self.message = message
        if severity is not None:
            self.severity = severity
        if source is not None:
            self.source = source
        if sync_group is not None:
            self.sync_group = sync_group
        if sync_key is not None:
            self.sync_key = sync_key
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def code(self):
        """Gets the code of this Alarm.  # noqa: E501

        code  # noqa: E501

        :return: The code of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Alarm.

        code  # noqa: E501

        :param code: The code of this Alarm.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def extra_data(self):
        """Gets the extra_data of this Alarm.  # noqa: E501

        alarm extra data  # noqa: E501

        :return: The extra_data of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this Alarm.

        alarm extra data  # noqa: E501

        :param extra_data: The extra_data of this Alarm.  # noqa: E501
        :type: str
        """

        self._extra_data = extra_data

    @property
    def message(self):
        """Gets the message of this Alarm.  # noqa: E501

        message  # noqa: E501

        :return: The message of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Alarm.

        message  # noqa: E501

        :param message: The message of this Alarm.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this Alarm.  # noqa: E501

        severity of the alarm  # noqa: E501

        :return: The severity of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Alarm.

        severity of the alarm  # noqa: E501

        :param severity: The severity of this Alarm.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this Alarm.  # noqa: E501

        the source of the alarm  # noqa: E501

        :return: The source of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Alarm.

        the source of the alarm  # noqa: E501

        :param source: The source of this Alarm.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def sync_group(self):
        """Gets the sync_group of this Alarm.  # noqa: E501

        sync_group  # noqa: E501

        :return: The sync_group of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._sync_group

    @sync_group.setter
    def sync_group(self, sync_group):
        """Sets the sync_group of this Alarm.

        sync_group  # noqa: E501

        :param sync_group: The sync_group of this Alarm.  # noqa: E501
        :type: str
        """

        self._sync_group = sync_group

    @property
    def sync_key(self):
        """Gets the sync_key of this Alarm.  # noqa: E501

        sync_key  # noqa: E501

        :return: The sync_key of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._sync_key

    @sync_key.setter
    def sync_key(self, sync_key):
        """Sets the sync_key of this Alarm.

        sync_key  # noqa: E501

        :param sync_key: The sync_key of this Alarm.  # noqa: E501
        :type: str
        """

        self._sync_key = sync_key

    @property
    def timestamp(self):
        """Gets the timestamp of this Alarm.  # noqa: E501

        The timestamp when alarm was raised  # noqa: E501

        :return: The timestamp of this Alarm.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Alarm.

        The timestamp when alarm was raised  # noqa: E501

        :param timestamp: The timestamp of this Alarm.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alarm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alarm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Alarm):
            return True

        return self.to_dict() != other.to_dict()
