# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConfigRepJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_run': 'str',
        'last_success': 'str',
        'name': 'str',
        'policy': 'str',
        'source': 'str',
        'source_path': 'str',
        'status': 'str',
        'target': 'str',
        'target_path': 'str',
        'type': 'str'
    }

    attribute_map = {
        'last_run': 'last_run',
        'last_success': 'last_success',
        'name': 'name',
        'policy': 'policy',
        'source': 'source',
        'source_path': 'source_path',
        'status': 'status',
        'target': 'target',
        'target_path': 'target_path',
        'type': 'type'
    }

    def __init__(self, last_run=None, last_success=None, name=None, policy=None, source=None, source_path=None, status=None, target=None, target_path=None, type=None, _configuration=None):  # noqa: E501
        """ConfigRepJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_run = None
        self._last_success = None
        self._name = None
        self._policy = None
        self._source = None
        self._source_path = None
        self._status = None
        self._target = None
        self._target_path = None
        self._type = None
        self.discriminator = None

        if last_run is not None:
            self.last_run = last_run
        if last_success is not None:
            self.last_success = last_success
        if name is not None:
            self.name = name
        if policy is not None:
            self.policy = policy
        if source is not None:
            self.source = source
        if source_path is not None:
            self.source_path = source_path
        if status is not None:
            self.status = status
        if target is not None:
            self.target = target
        if target_path is not None:
            self.target_path = target_path
        if type is not None:
            self.type = type

    @property
    def last_run(self):
        """Gets the last_run of this ConfigRepJob.  # noqa: E501

        Last time this job ran.  # noqa: E501

        :return: The last_run of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this ConfigRepJob.

        Last time this job ran.  # noqa: E501

        :param last_run: The last_run of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._last_run = last_run

    @property
    def last_success(self):
        """Gets the last_success of this ConfigRepJob.  # noqa: E501

        Last time this job ran successfully  # noqa: E501

        :return: The last_success of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._last_success

    @last_success.setter
    def last_success(self, last_success):
        """Sets the last_success of this ConfigRepJob.

        Last time this job ran successfully  # noqa: E501

        :param last_success: The last_success of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._last_success = last_success

    @property
    def name(self):
        """Gets the name of this ConfigRepJob.  # noqa: E501

        Unique identifier for the config job  # noqa: E501

        :return: The name of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigRepJob.

        Unique identifier for the config job  # noqa: E501

        :param name: The name of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this ConfigRepJob.  # noqa: E501

        Policy that this job belongs to  # noqa: E501

        :return: The policy of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigRepJob.

        Policy that this job belongs to  # noqa: E501

        :param policy: The policy of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._policy = policy

    @property
    def source(self):
        """Gets the source of this ConfigRepJob.  # noqa: E501

        Source node for configuration replication  # noqa: E501

        :return: The source of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConfigRepJob.

        Source node for configuration replication  # noqa: E501

        :param source: The source of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_path(self):
        """Gets the source_path of this ConfigRepJob.  # noqa: E501

        Source path for this job  # noqa: E501

        :return: The source_path of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this ConfigRepJob.

        Source path for this job  # noqa: E501

        :param source_path: The source_path of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def status(self):
        """Gets the status of this ConfigRepJob.  # noqa: E501

        Whether the job is enabled or disabled  # noqa: E501

        :return: The status of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConfigRepJob.

        Whether the job is enabled or disabled  # noqa: E501

        :param status: The status of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def target(self):
        """Gets the target of this ConfigRepJob.  # noqa: E501

        Target node for configuration replication  # noqa: E501

        :return: The target of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ConfigRepJob.

        Target node for configuration replication  # noqa: E501

        :param target: The target of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def target_path(self):
        """Gets the target_path of this ConfigRepJob.  # noqa: E501

        Target path for this job  # noqa: E501

        :return: The target_path of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._target_path

    @target_path.setter
    def target_path(self, target_path):
        """Sets the target_path of this ConfigRepJob.

        Target path for this job  # noqa: E501

        :param target_path: The target_path of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._target_path = target_path

    @property
    def type(self):
        """Gets the type of this ConfigRepJob.  # noqa: E501

        The type of config rep job  # noqa: E501

        :return: The type of this ConfigRepJob.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigRepJob.

        The type of config rep job  # noqa: E501

        :param type: The type of this ConfigRepJob.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigRepJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigRepJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigRepJob):
            return True

        return self.to_dict() != other.to_dict()
