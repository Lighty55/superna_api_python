# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StatusDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'reason': 'str',
        'status': 'DRFailoverStatus',
        'status_children': 'list[StatusDetail]'
    }

    attribute_map = {
        'name': 'name',
        'reason': 'reason',
        'status': 'status',
        'status_children': 'statusChildren'
    }

    def __init__(self, name=None, reason=None, status=None, status_children=None, _configuration=None):  # noqa: E501
        """StatusDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._reason = None
        self._status = None
        self._status_children = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if reason is not None:
            self.reason = reason
        if status is not None:
            self.status = status
        if status_children is not None:
            self.status_children = status_children

    @property
    def name(self):
        """Gets the name of this StatusDetail.  # noqa: E501

        Config Name  # noqa: E501

        :return: The name of this StatusDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatusDetail.

        Config Name  # noqa: E501

        :param name: The name of this StatusDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this StatusDetail.  # noqa: E501

        Reason  # noqa: E501

        :return: The reason of this StatusDetail.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this StatusDetail.

        Reason  # noqa: E501

        :param reason: The reason of this StatusDetail.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this StatusDetail.  # noqa: E501


        :return: The status of this StatusDetail.  # noqa: E501
        :rtype: DRFailoverStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusDetail.


        :param status: The status of this StatusDetail.  # noqa: E501
        :type: DRFailoverStatus
        """

        self._status = status

    @property
    def status_children(self):
        """Gets the status_children of this StatusDetail.  # noqa: E501


        :return: The status_children of this StatusDetail.  # noqa: E501
        :rtype: list[StatusDetail]
        """
        return self._status_children

    @status_children.setter
    def status_children(self, status_children):
        """Sets the status_children of this StatusDetail.


        :param status_children: The status_children of this StatusDetail.  # noqa: E501
        :type: list[StatusDetail]
        """

        self._status_children = status_children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatusDetail):
            return True

        return self.to_dict() != other.to_dict()
