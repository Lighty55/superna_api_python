# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RansomwareV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_ransomware_heartbeat_post(self, ip, token, esaid, **kwargs):  # noqa: E501
        """v1_ransomware_heartbeat_post  # noqa: E501

        Eyeglass Service appliance Endpoints register and update at this url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_ransomware_heartbeat_post(ip, token, esaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip: ip address of this node (required)
        :param str token: Api token from Eyeglass Rest API (required)
        :param str esaid: id of the node sending the heartbeat (required)
        :param str name: name of this node
        :param str ostime: OS time
        :param HeartbeatRequestBody status: List of component statuses
        :return: HeartbeatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_ransomware_heartbeat_post_with_http_info(ip, token, esaid, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_ransomware_heartbeat_post_with_http_info(ip, token, esaid, **kwargs)  # noqa: E501
            return data

    def v1_ransomware_heartbeat_post_with_http_info(self, ip, token, esaid, **kwargs):  # noqa: E501
        """v1_ransomware_heartbeat_post  # noqa: E501

        Eyeglass Service appliance Endpoints register and update at this url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_ransomware_heartbeat_post_with_http_info(ip, token, esaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip: ip address of this node (required)
        :param str token: Api token from Eyeglass Rest API (required)
        :param str esaid: id of the node sending the heartbeat (required)
        :param str name: name of this node
        :param str ostime: OS time
        :param HeartbeatRequestBody status: List of component statuses
        :return: HeartbeatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip', 'token', 'esaid', 'name', 'ostime', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_ransomware_heartbeat_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in params or
                                                       params['ip'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ip` when calling `v1_ransomware_heartbeat_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `v1_ransomware_heartbeat_post`")  # noqa: E501
        # verify the required parameter 'esaid' is set
        if self.api_client.client_side_validation and ('esaid' not in params or
                                                       params['esaid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `esaid` when calling `v1_ransomware_heartbeat_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'esaid' in params:
            query_params.append(('esaid', params['esaid']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'ostime' in params:
            query_params.append(('ostime', params['ostime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'status' in params:
            body_params = params['status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/ransomware/heartbeat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HeartbeatResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_ransomware_notification_post(self, sid, **kwargs):  # noqa: E501
        """Send an RDA event to Eyeglass to be handled  # noqa: E501

        Send a RDA event to Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_ransomware_notification_post(sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sid: SID of user potentially harmful (required)
        :return: NotificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_ransomware_notification_post_with_http_info(sid, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_ransomware_notification_post_with_http_info(sid, **kwargs)  # noqa: E501
            return data

    def v1_ransomware_notification_post_with_http_info(self, sid, **kwargs):  # noqa: E501
        """Send an RDA event to Eyeglass to be handled  # noqa: E501

        Send a RDA event to Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_ransomware_notification_post_with_http_info(sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sid: SID of user potentially harmful (required)
        :return: NotificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_ransomware_notification_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sid' is set
        if self.api_client.client_side_validation and ('sid' not in params or
                                                       params['sid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sid` when calling `v1_ransomware_notification_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sid' in params:
            query_params.append(('sid', params['sid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/ransomware/notification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_ransomware_rswevents_get(self, **kwargs):  # noqa: E501
        """v1_ransomware_rswevents_get  # noqa: E501

        Get a list active RSW events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_ransomware_rswevents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RSWEventResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_ransomware_rswevents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_ransomware_rswevents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_ransomware_rswevents_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_ransomware_rswevents_get  # noqa: E501

        Get a list active RSW events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_ransomware_rswevents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RSWEventResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_ransomware_rswevents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/ransomware/rswevents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RSWEventResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
