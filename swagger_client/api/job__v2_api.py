# coding: utf-8

"""
    Superna Eyeglass REST API

    A collection of utilities for programmatic interaction with Superna Eyeglass  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@superna.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JobV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_jobs_airgap_accessrequest_get(self, eva_id, **kwargs):  # noqa: E501
        """Eyeglass access requests to vault  # noqa: E501

        retrieves and resets the eyeglass access request to vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_accessrequest_get(eva_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eva_id: Vault agent ID (required)
        :return: AirgapJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_airgap_accessrequest_get_with_http_info(eva_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_airgap_accessrequest_get_with_http_info(eva_id, **kwargs)  # noqa: E501
            return data

    def v2_jobs_airgap_accessrequest_get_with_http_info(self, eva_id, **kwargs):  # noqa: E501
        """Eyeglass access requests to vault  # noqa: E501

        retrieves and resets the eyeglass access request to vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_accessrequest_get_with_http_info(eva_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eva_id: Vault agent ID (required)
        :return: AirgapJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['eva_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_airgap_accessrequest_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'eva_id' is set
        if self.api_client.client_side_validation and ('eva_id' not in params or
                                                       params['eva_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `eva_id` when calling `v2_jobs_airgap_accessrequest_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eva_id' in params:
            query_params.append(('evaID', params['eva_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/airgap/accessrequest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AirgapJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_airgap_get(self, eva_id, **kwargs):  # noqa: E501
        """Get all airgap jobs  # noqa: E501

        View all airgap jobs that can run through vault engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_get(eva_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eva_id: Vault agent ID (required)
        :return: list[AirgapJob]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_airgap_get_with_http_info(eva_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_airgap_get_with_http_info(eva_id, **kwargs)  # noqa: E501
            return data

    def v2_jobs_airgap_get_with_http_info(self, eva_id, **kwargs):  # noqa: E501
        """Get all airgap jobs  # noqa: E501

        View all airgap jobs that can run through vault engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_get_with_http_info(eva_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eva_id: Vault agent ID (required)
        :return: list[AirgapJob]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['eva_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_airgap_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'eva_id' is set
        if self.api_client.client_side_validation and ('eva_id' not in params or
                                                       params['eva_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `eva_id` when calling `v2_jobs_airgap_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eva_id' in params:
            query_params.append(('evaID', params['eva_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/airgap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AirgapJob]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_airgap_id_get(self, id, jobname, **kwargs):  # noqa: E501
        """Retrieves a specific recently run airgap job, if it exists  # noqa: E501

        Retrieves a specific recently run airgap job, if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_id_get(id, jobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :param str jobname: Name of the airgap job (as retrieved with /v2/jobs/airgap GET) (required)
        :return: JobStatusDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_airgap_id_get_with_http_info(id, jobname, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_airgap_id_get_with_http_info(id, jobname, **kwargs)  # noqa: E501
            return data

    def v2_jobs_airgap_id_get_with_http_info(self, id, jobname, **kwargs):  # noqa: E501
        """Retrieves a specific recently run airgap job, if it exists  # noqa: E501

        Retrieves a specific recently run airgap job, if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_id_get_with_http_info(id, jobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :param str jobname: Name of the airgap job (as retrieved with /v2/jobs/airgap GET) (required)
        :return: JobStatusDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jobname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_airgap_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `v2_jobs_airgap_id_get`")  # noqa: E501
        # verify the required parameter 'jobname' is set
        if self.api_client.client_side_validation and ('jobname' not in params or
                                                       params['jobname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `jobname` when calling `v2_jobs_airgap_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'jobname' in params:
            query_params.append(('jobname', params['jobname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/airgap/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobStatusDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_airgap_post(self, jobname, **kwargs):  # noqa: E501
        """Start an airgap job  # noqa: E501

        Start an airgap job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_post(jobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobname: Name of the airgap job (as retrieved with /v2/jobs/airgap GET) (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_airgap_post_with_http_info(jobname, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_airgap_post_with_http_info(jobname, **kwargs)  # noqa: E501
            return data

    def v2_jobs_airgap_post_with_http_info(self, jobname, **kwargs):  # noqa: E501
        """Start an airgap job  # noqa: E501

        Start an airgap job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_post_with_http_info(jobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobname: Name of the airgap job (as retrieved with /v2/jobs/airgap GET) (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_airgap_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobname' is set
        if self.api_client.client_side_validation and ('jobname' not in params or
                                                       params['jobname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `jobname` when calling `v2_jobs_airgap_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'jobname' in params:
            query_params.append(('jobname', params['jobname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/airgap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_airgap_status_post(self, jobname, job_status_detail, **kwargs):  # noqa: E501
        """post airgap job status  # noqa: E501

        Send status of vault initiated airgap job back to eyeglass  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_status_post(jobname, job_status_detail, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobname: Name of the airgap job (required)
        :param JobStatusDetail job_status_detail: Update data for the specified ECS airgap job. (required)
        :return: StatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_airgap_status_post_with_http_info(jobname, job_status_detail, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_airgap_status_post_with_http_info(jobname, job_status_detail, **kwargs)  # noqa: E501
            return data

    def v2_jobs_airgap_status_post_with_http_info(self, jobname, job_status_detail, **kwargs):  # noqa: E501
        """post airgap job status  # noqa: E501

        Send status of vault initiated airgap job back to eyeglass  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_status_post_with_http_info(jobname, job_status_detail, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobname: Name of the airgap job (required)
        :param JobStatusDetail job_status_detail: Update data for the specified ECS airgap job. (required)
        :return: StatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobname', 'job_status_detail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_airgap_status_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobname' is set
        if self.api_client.client_side_validation and ('jobname' not in params or
                                                       params['jobname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `jobname` when calling `v2_jobs_airgap_status_post`")  # noqa: E501
        # verify the required parameter 'job_status_detail' is set
        if self.api_client.client_side_validation and ('job_status_detail' not in params or
                                                       params['job_status_detail'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_status_detail` when calling `v2_jobs_airgap_status_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'jobname' in params:
            query_params.append(('jobname', params['jobname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_status_detail' in params:
            body_params = params['job_status_detail']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/airgap/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_airgap_uploadlogs_post(self, filename, nodename, **kwargs):  # noqa: E501
        """Uploads the logs under eyeglass logs directory.  # noqa: E501

        Uploads the vault airgap logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_uploadlogs_post(filename, nodename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename: The name and path of the file to upload from node to eyeglass (required)
        :param str nodename: The name of the node where file resides (required)
        :param str destfilename: The name of the file on destination
        :return: StatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_airgap_uploadlogs_post_with_http_info(filename, nodename, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_airgap_uploadlogs_post_with_http_info(filename, nodename, **kwargs)  # noqa: E501
            return data

    def v2_jobs_airgap_uploadlogs_post_with_http_info(self, filename, nodename, **kwargs):  # noqa: E501
        """Uploads the logs under eyeglass logs directory.  # noqa: E501

        Uploads the vault airgap logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_airgap_uploadlogs_post_with_http_info(filename, nodename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename: The name and path of the file to upload from node to eyeglass (required)
        :param str nodename: The name of the node where file resides (required)
        :param str destfilename: The name of the file on destination
        :return: StatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filename', 'nodename', 'destfilename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_airgap_uploadlogs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filename' is set
        if self.api_client.client_side_validation and ('filename' not in params or
                                                       params['filename'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filename` when calling `v2_jobs_airgap_uploadlogs_post`")  # noqa: E501
        # verify the required parameter 'nodename' is set
        if self.api_client.client_side_validation and ('nodename' not in params or
                                                       params['nodename'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `nodename` when calling `v2_jobs_airgap_uploadlogs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'nodename' in params:
            query_params.append(('nodename', params['nodename']))  # noqa: E501
        if 'destfilename' in params:
            query_params.append(('destfilename', params['destfilename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/airgap/uploadlogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_failover_drtest_post(self, enable, policy, **kwargs):  # noqa: E501
        """Enter/Exit DR test mode  # noqa: E501

        Enter/Exit DR test mode for a given policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_drtest_post(enable, policy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable: True = Make target writable (Enter DR test mode). False = Make target read-only (Exit DR test mode)  (required)
        :param str policy: DR testing policy id (as retrieved with /nodes/{id}/policies GET) (required)
        :param bool configsync: Run a configuration while DR test job
        :param bool datasync: Run policy while DR test job
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_failover_drtest_post_with_http_info(enable, policy, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_failover_drtest_post_with_http_info(enable, policy, **kwargs)  # noqa: E501
            return data

    def v2_jobs_failover_drtest_post_with_http_info(self, enable, policy, **kwargs):  # noqa: E501
        """Enter/Exit DR test mode  # noqa: E501

        Enter/Exit DR test mode for a given policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_drtest_post_with_http_info(enable, policy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable: True = Make target writable (Enter DR test mode). False = Make target read-only (Exit DR test mode)  (required)
        :param str policy: DR testing policy id (as retrieved with /nodes/{id}/policies GET) (required)
        :param bool configsync: Run a configuration while DR test job
        :param bool datasync: Run policy while DR test job
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable', 'policy', 'configsync', 'datasync']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_failover_drtest_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if self.api_client.client_side_validation and ('enable' not in params or
                                                       params['enable'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enable` when calling `v2_jobs_failover_drtest_post`")  # noqa: E501
        # verify the required parameter 'policy' is set
        if self.api_client.client_side_validation and ('policy' not in params or
                                                       params['policy'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `policy` when calling `v2_jobs_failover_drtest_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enable' in params:
            query_params.append(('enable', params['enable']))  # noqa: E501
        if 'configsync' in params:
            query_params.append(('configsync', params['configsync']))  # noqa: E501
        if 'datasync' in params:
            query_params.append(('datasync', params['datasync']))  # noqa: E501
        if 'policy' in params:
            query_params.append(('policy', params['policy']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/failover/drtest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_failover_get(self, **kwargs):  # noqa: E501
        """Get failover jobs  # noqa: E501

        Returns failover jobs from Superna Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: filter running or complete jobs [all, running, finished]
        :param bool success: filter jobs by result success [true, false]
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_failover_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_failover_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_jobs_failover_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get failover jobs  # noqa: E501

        Returns failover jobs from Superna Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: filter running or complete jobs [all, running, finished]
        :param bool success: filter jobs by result success [true, false]
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'success']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_failover_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'success' in params:
            query_params.append(('success', params['success']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/failover', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Job]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_failover_id_delete(self, id, **kwargs):  # noqa: E501
        """v2_jobs_failover_id_delete  # noqa: E501

        Cancels a running failover job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :param Empty1 empty: Empty body for delete request {}
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_failover_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_failover_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_jobs_failover_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v2_jobs_failover_id_delete  # noqa: E501

        Cancels a running failover job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :param Empty1 empty: Empty body for delete request {}
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'empty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_failover_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `v2_jobs_failover_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'empty' in params:
            body_params = params['empty']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/failover/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_failover_id_get(self, id, **kwargs):  # noqa: E501
        """Retreive a failover job by ID  # noqa: E501

        Retrieve a failover job by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_failover_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_failover_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_jobs_failover_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retreive a failover job by ID  # noqa: E501

        Retrieve a failover job by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_failover_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `v2_jobs_failover_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/failover/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_failover_id_log_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the logfile for a running or finished failover job  # noqa: E501

        Get the failover jobs log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_id_log_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_failover_id_log_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_failover_id_log_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_jobs_failover_id_log_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the logfile for a running or finished failover job  # noqa: E501

        Get the failover jobs log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_id_log_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_failover_id_log_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `v2_jobs_failover_id_log_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/failover/{id}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_failover_post(self, sourceid, targetid, failovertarget, blockonwarnings, **kwargs):  # noqa: E501
        """Create a new failover job  # noqa: E501

        Launch a new failover job in Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_post(sourceid, targetid, failovertarget, blockonwarnings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourceid: ID of the source node for this job (required)
        :param str targetid: ID of the target node for this job (required)
        :param str failovertarget: ID of the access zone to failover OR IDs of syncIQ policies (comma separated) to failover. (required)
        :param bool blockonwarnings: Block failover on warnings (required)
        :param str pool: Pool name in case of pool failover. The name format is groupName:subnetName:poolName
        :param bool controlled: Execute a controlled failover by running operations against the source cluster  as well as the target
        :param bool datasync: Run the final incremental data sync before failover
        :param bool configsync: Run a configuration sync before failover
        :param bool resyncprep: Run resync prep on the source cluster to create the mirror policies
        :param bool disablemirror: Disable mirror policies created on the failover target
        :param bool quotasync: Run quota jobs to failover quotas to target
        :param bool rollbackrenameshares: Rollback renamed shares on failure
        :param bool smbdataintegrity: SMB data integrity failover
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_failover_post_with_http_info(sourceid, targetid, failovertarget, blockonwarnings, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_failover_post_with_http_info(sourceid, targetid, failovertarget, blockonwarnings, **kwargs)  # noqa: E501
            return data

    def v2_jobs_failover_post_with_http_info(self, sourceid, targetid, failovertarget, blockonwarnings, **kwargs):  # noqa: E501
        """Create a new failover job  # noqa: E501

        Launch a new failover job in Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_post_with_http_info(sourceid, targetid, failovertarget, blockonwarnings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourceid: ID of the source node for this job (required)
        :param str targetid: ID of the target node for this job (required)
        :param str failovertarget: ID of the access zone to failover OR IDs of syncIQ policies (comma separated) to failover. (required)
        :param bool blockonwarnings: Block failover on warnings (required)
        :param str pool: Pool name in case of pool failover. The name format is groupName:subnetName:poolName
        :param bool controlled: Execute a controlled failover by running operations against the source cluster  as well as the target
        :param bool datasync: Run the final incremental data sync before failover
        :param bool configsync: Run a configuration sync before failover
        :param bool resyncprep: Run resync prep on the source cluster to create the mirror policies
        :param bool disablemirror: Disable mirror policies created on the failover target
        :param bool quotasync: Run quota jobs to failover quotas to target
        :param bool rollbackrenameshares: Rollback renamed shares on failure
        :param bool smbdataintegrity: SMB data integrity failover
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sourceid', 'targetid', 'failovertarget', 'blockonwarnings', 'pool', 'controlled', 'datasync', 'configsync', 'resyncprep', 'disablemirror', 'quotasync', 'rollbackrenameshares', 'smbdataintegrity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_failover_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sourceid' is set
        if self.api_client.client_side_validation and ('sourceid' not in params or
                                                       params['sourceid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sourceid` when calling `v2_jobs_failover_post`")  # noqa: E501
        # verify the required parameter 'targetid' is set
        if self.api_client.client_side_validation and ('targetid' not in params or
                                                       params['targetid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `targetid` when calling `v2_jobs_failover_post`")  # noqa: E501
        # verify the required parameter 'failovertarget' is set
        if self.api_client.client_side_validation and ('failovertarget' not in params or
                                                       params['failovertarget'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `failovertarget` when calling `v2_jobs_failover_post`")  # noqa: E501
        # verify the required parameter 'blockonwarnings' is set
        if self.api_client.client_side_validation and ('blockonwarnings' not in params or
                                                       params['blockonwarnings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `blockonwarnings` when calling `v2_jobs_failover_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sourceid' in params:
            query_params.append(('sourceid', params['sourceid']))  # noqa: E501
        if 'targetid' in params:
            query_params.append(('targetid', params['targetid']))  # noqa: E501
        if 'failovertarget' in params:
            query_params.append(('failovertarget', params['failovertarget']))  # noqa: E501
        if 'pool' in params:
            query_params.append(('pool', params['pool']))  # noqa: E501
        if 'controlled' in params:
            query_params.append(('controlled', params['controlled']))  # noqa: E501
        if 'datasync' in params:
            query_params.append(('datasync', params['datasync']))  # noqa: E501
        if 'configsync' in params:
            query_params.append(('configsync', params['configsync']))  # noqa: E501
        if 'resyncprep' in params:
            query_params.append(('resyncprep', params['resyncprep']))  # noqa: E501
        if 'disablemirror' in params:
            query_params.append(('disablemirror', params['disablemirror']))  # noqa: E501
        if 'quotasync' in params:
            query_params.append(('quotasync', params['quotasync']))  # noqa: E501
        if 'blockonwarnings' in params:
            query_params.append(('blockonwarnings', params['blockonwarnings']))  # noqa: E501
        if 'rollbackrenameshares' in params:
            query_params.append(('rollbackrenameshares', params['rollbackrenameshares']))  # noqa: E501
        if 'smbdataintegrity' in params:
            query_params.append(('smbdataintegrity', params['smbdataintegrity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/failover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_failover_rehearsal_post(self, enable, sourceid, targetid, failovertarget, **kwargs):  # noqa: E501
        """Create a new rehearsal job  # noqa: E501

        Launch a new rehearsal job in Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_rehearsal_post(enable, sourceid, targetid, failovertarget, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable: Enable or disable (=false) the rehearsal mode (required)
        :param str sourceid: ID of the source node for this job (required)
        :param str targetid: ID of the target node for this job (required)
        :param str failovertarget: ID of the access zone to failover OR IDs of syncIQ policies (comma separated) to failover. (required)
        :param str pool: Pool name in case of pool failover. The name format is groupName:subnetName:poolName
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_failover_rehearsal_post_with_http_info(enable, sourceid, targetid, failovertarget, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_failover_rehearsal_post_with_http_info(enable, sourceid, targetid, failovertarget, **kwargs)  # noqa: E501
            return data

    def v2_jobs_failover_rehearsal_post_with_http_info(self, enable, sourceid, targetid, failovertarget, **kwargs):  # noqa: E501
        """Create a new rehearsal job  # noqa: E501

        Launch a new rehearsal job in Eyeglass.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_failover_rehearsal_post_with_http_info(enable, sourceid, targetid, failovertarget, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enable: Enable or disable (=false) the rehearsal mode (required)
        :param str sourceid: ID of the source node for this job (required)
        :param str targetid: ID of the target node for this job (required)
        :param str failovertarget: ID of the access zone to failover OR IDs of syncIQ policies (comma separated) to failover. (required)
        :param str pool: Pool name in case of pool failover. The name format is groupName:subnetName:poolName
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable', 'sourceid', 'targetid', 'failovertarget', 'pool']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_failover_rehearsal_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if self.api_client.client_side_validation and ('enable' not in params or
                                                       params['enable'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enable` when calling `v2_jobs_failover_rehearsal_post`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if self.api_client.client_side_validation and ('sourceid' not in params or
                                                       params['sourceid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sourceid` when calling `v2_jobs_failover_rehearsal_post`")  # noqa: E501
        # verify the required parameter 'targetid' is set
        if self.api_client.client_side_validation and ('targetid' not in params or
                                                       params['targetid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `targetid` when calling `v2_jobs_failover_rehearsal_post`")  # noqa: E501
        # verify the required parameter 'failovertarget' is set
        if self.api_client.client_side_validation and ('failovertarget' not in params or
                                                       params['failovertarget'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `failovertarget` when calling `v2_jobs_failover_rehearsal_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enable' in params:
            query_params.append(('enable', params['enable']))  # noqa: E501
        if 'sourceid' in params:
            query_params.append(('sourceid', params['sourceid']))  # noqa: E501
        if 'targetid' in params:
            query_params.append(('targetid', params['targetid']))  # noqa: E501
        if 'failovertarget' in params:
            query_params.append(('failovertarget', params['failovertarget']))  # noqa: E501
        if 'pool' in params:
            query_params.append(('pool', params['pool']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/failover/rehearsal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_readiness_get(self, **kwargs):  # noqa: E501
        """View all recent readiness jobs  # noqa: E501

        View all recent readiness jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_readiness_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: filter running or complete jobs [all, running, finished]
        :return: list[JobStatusDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_readiness_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_readiness_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_jobs_readiness_get_with_http_info(self, **kwargs):  # noqa: E501
        """View all recent readiness jobs  # noqa: E501

        View all recent readiness jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_readiness_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: filter running or complete jobs [all, running, finished]
        :return: list[JobStatusDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_readiness_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/readiness', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JobStatusDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_readiness_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific recently run readiness job, if it exists  # noqa: E501

        Retrieves a specific recently run readiness job, if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_readiness_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: JobStatusDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_readiness_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_readiness_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_jobs_readiness_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific recently run readiness job, if it exists  # noqa: E501

        Retrieves a specific recently run readiness job, if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_readiness_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: JobStatusDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_readiness_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `v2_jobs_readiness_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/readiness/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobStatusDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_readiness_post(self, **kwargs):  # noqa: E501
        """Run zone readiness job  # noqa: E501

        Run zone readiness job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_readiness_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_readiness_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_readiness_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_jobs_readiness_post_with_http_info(self, **kwargs):  # noqa: E501
        """Run zone readiness job  # noqa: E501

        Run zone readiness job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_readiness_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_readiness_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/readiness', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_replication_get(self, **kwargs):  # noqa: E501
        """Get all recent replication jobs  # noqa: E501

        View all recent replication jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_replication_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: filter running or complete jobs [all, running, finished]
        :return: list[JobStatusDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_replication_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_replication_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_jobs_replication_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all recent replication jobs  # noqa: E501

        View all recent replication jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_replication_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: filter running or complete jobs [all, running, finished]
        :return: list[JobStatusDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_replication_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/replication', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JobStatusDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_replication_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific replication job, if it was run recently  # noqa: E501

        Retrieves a specific replication job, if it was run recently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_replication_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: JobStatusDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_replication_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_replication_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_jobs_replication_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific replication job, if it was run recently  # noqa: E501

        Retrieves a specific replication job, if it was run recently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_replication_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the job to retrieve (required)
        :return: JobStatusDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_replication_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `v2_jobs_replication_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/replication/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobStatusDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_jobs_replication_post(self, **kwargs):  # noqa: E501
        """Run a configuration replication job  # noqa: E501

        Run a configuration replication job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_replication_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_jobs_replication_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_jobs_replication_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_jobs_replication_post_with_http_info(self, **kwargs):  # noqa: E501
        """Run a configuration replication job  # noqa: E501

        Run a configuration replication job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_jobs_replication_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_jobs_replication_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['internalApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/jobs/replication', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
